import { c as create_ssr_component } from "./index.js";
const metadata = {
  "id": "0015",
  "title": "Plutus custom data types",
  "date": "2022-09-29",
  "categories": ["Plutus", "Cardano"],
  "sources": [
    "https://www.essentialcardano.io/faq/what-is-a-blockchain",
    "https://en.wikipedia.org/wiki/Cryptocurrency",
    "https://www.essentialcardano.io/faq/what-is-proof-of-stake-pos",
    "https://forum.cardano.org/t/staking-and-delegating-for-beginners-a-step-by-step-guide/36681",
    "https://forum.cardano.org/t/choosing-a-stake-pool-and-delegating-your-ada/38931"
  ]
};
const _0015 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h2 id="${"plutus-custom-data-types"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#plutus-custom-data-types"}"><span class="${"icon icon-link"}"></span></a>Plutus Custom Data Types</h2>
<h2 id="${"on-chain-code"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#on-chain-code"}"><span class="${"icon icon-link"}"></span></a>On-chain code</h2>
<h3 id="${"custom-data-type"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#custom-data-type"}"><span class="${"icon icon-link"}"></span></a>Custom data type</h3>
<ul><li>Very important difference between high-level typed PlutusTx but basic types on Haskell vs advanced data types on Haskell is the use of<ul><li><code>PlutusTx.unstableMakeIsData &#39;&#39;MyWonderfullRedeemer</code> -&gt; writes at compile time an instance of the data type (there is a <code>stableMakeIsData</code>, we are using this because this was has been used in examples so there are resources available).<ul><li>This notation <code>&#39;&#39;MyWonderfullRedeemer</code> gets (ðŸ’‰) injected by one of Haskellâ€™s compiler extensions (i.e., <code>{-# LANGUAGE &lt;Compiler-extension-name&gt; #-}</code></li></ul></li></ul></li>
<li><code>newtype MyWonderfullRedeemer = MWR Integer</code></li>
<li>The difference is that this <code>Integer</code> alone (as in the <code>TypedValidator</code> contract) is a basic Haskell data type that already exists in the Prelude, itâ€™s already INLINABLE, <strong>but</strong> <code>MyWonderfullRedeemer</code> is <strong>not</strong>.</li></ul>
<h3 id="${"custom-data-type-redeemer"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#custom-data-type-redeemer"}"><span class="${"icon icon-link"}"></span></a>Custom data type Redeemer</h3>
<ul><li>ðŸ‘‡ <strong>Typed Redeemer</strong></li></ul>
<pre class="${"language-haskell"}"><!-- HTML_TAG_START -->${`<code class="language-haskell"><span class="token comment">&#123;-# INLINABLE typedRedeemer #-&#125;</span> 
<span class="token hvariable">typedRedeemer</span> <span class="token operator">::</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token constant">Integer</span> <span class="token operator">-></span> <span class="token constant">ScriptContext</span> <span class="token operator">-></span> <span class="token constant">Bool</span>   
<span class="token hvariable">typedRedeemer</span> <span class="token hvariable">_</span> <span class="token hvariable">redeemer</span> <span class="token hvariable">_</span> <span class="token operator">=</span> <span class="token hvariable">traceIfFalse</span> <span class="token string">"wrong redeemer"</span> <span class="token punctuation">(</span><span class="token hvariable">redeemer</span> <span class="token operator">==</span> <span class="token number">42</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<ul><li>ðŸ‘‡ <strong>Custom</strong> Typed Redeemer</li></ul>
<pre class="${"language-haskell"}"><!-- HTML_TAG_START -->${`<code class="language-haskell"><span class="token comment">&#123;-# INLINABLE customTypedRedeemer #-&#125;</span> 
<span class="token hvariable">customTypedRedeemer</span> <span class="token operator">::</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token constant">MyWonderfullRedeemer</span> <span class="token operator">-></span> <span class="token constant">ScriptContext</span> <span class="token operator">-></span> <span class="token constant">Bool</span>   
<span class="token hvariable">customTypedRedeemer</span> <span class="token hvariable">_</span> <span class="token punctuation">(</span><span class="token constant">MWR</span> <span class="token hvariable">redeemer</span><span class="token punctuation">)</span> <span class="token hvariable">_</span> <span class="token operator">=</span> <span class="token hvariable">traceIfFalse</span> <span class="token string">"wrong redeemer"</span> <span class="token punctuation">(</span><span class="token hvariable">redeemer</span> <span class="token operator">==</span> <span class="token number">42</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre>
<ul><li><p>The redeemer type <code>Integer</code> is now <code>MyWonderfullRedeemer</code>, (i.e, <code>newtype MyWonderfullRedeemer = MWR Integer</code>)</p></li>
<li><p>In order to <strong>pattern match</strong> the <strong>data constructor</strong>, - aka - - - - - - - - - - - - - - - - - - ðŸ‘†</p>
<ul><li><code>redeemer</code> in (<code>typedRedeemer _ redeemer _ = traceIfFalse &quot;wrong redeemer&quot; (redeemer == 42)</code>)<ul><li>is now <code>customTypedRedeemer _ (MWR redeemer) _ = traceIfFalse &quot;wrong redeemer&quot; (redeemer == 42)</code><ul><li><em>notice the <code>(MWR)</code></em></li></ul></li>
<li>basically, we are defining a wrapper <code>MyWonderfullRedeemer</code> which<ul><li>contains an <code>Integer</code> value, (<code>MWR Integer</code>)<ul><li>which can extracted through <strong>pattern matching</strong> <em>(see couple lines before)</em></li></ul></li></ul></li></ul></li></ul></li>
<li><p><strong>Custom</strong> <code>data Typed</code></p></li>
<li><p>Typed</p></li></ul>
<pre class="${"language-haskell"}"><!-- HTML_TAG_START -->${`<code class="language-haskell"><span class="token keyword">data</span> <span class="token constant">Typed</span>                                            
<span class="token keyword">instance</span> <span class="token constant">Scripts<span class="token punctuation">.</span>ValidatorTypes</span> <span class="token constant">Typed</span> <span class="token keyword">where</span>
    <span class="token keyword">type</span> <span class="token keyword">instance</span> <span class="token constant">DatumType</span> <span class="token constant">Typed</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>                
    <span class="token keyword">type</span> <span class="token keyword">instance</span> <span class="token constant">RedeemerType</span> <span class="token constant">Typed</span> <span class="token operator">=</span> <span class="token constant">Integer</span> </code>`}<!-- HTML_TAG_END --></pre>
<p><strong>Custom</strong> Typed</p>
<pre class="${"language-haskell"}"><!-- HTML_TAG_START -->${`<code class="language-haskell"><span class="token keyword">data</span> <span class="token constant">Typed</span>                                            
<span class="token keyword">instance</span> <span class="token constant">Scripts<span class="token punctuation">.</span>ValidatorTypes</span> <span class="token constant">Typed</span> <span class="token keyword">where</span>
    <span class="token keyword">type</span> <span class="token keyword">instance</span> <span class="token constant">DatumType</span> <span class="token constant">Typed</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>                
    <span class="token keyword">type</span> <span class="token keyword">instance</span> <span class="token constant">RedeemerType</span> <span class="token constant">Typed</span> <span class="token operator">=</span> <span class="token constant">MyWonderfullRedeemer</span> </code>`}<!-- HTML_TAG_END --></pre>
<ul><li>All that changes is we need to change <code>Integer</code> to the new type <code>MyWonderfullRedeemer</code></li></ul>
<h3 id="${"what-is-plutustxunstablemakeisdata-doing"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#what-is-plutustxunstablemakeisdata-doing"}"><span class="${"icon icon-link"}"></span></a>What is <code>PlutusTx.unstableMakeIsData</code> doing?</h3>
<ul><li>Plutus has a prelude library because in it, all data types (i.e., <code>head</code>, <code>tail</code>, etc.) are <code>INLINABLE</code>. They need to be in order to be inserted into the template Haskell that later gets compiled into Plutus Core, etc., etc.<ul><li>However, here we are using our own <strong>custom</strong> data type with arbitrary logic.</li>
<li>This data type is not included in the Plutus Prelude library <strong>and is not</strong> <code>INLINABLE</code></li>
<li>Thatâ€™s where <code>PlutusTx.unstableMakeIsData</code> (thereâ€™s also <code>PlutusTx.stableMakeIsData</code>), it allows us to make our own <strong>custom data types</strong> <code>INLINABLE</code></li></ul></li></ul>
<h3 id="${"custom-typed-validator"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#custom-typed-validator"}"><span class="${"icon icon-link"}"></span></a>Custom Typed Validator</h3>
<ul><li>Typed Validator</li></ul>
<pre class="${"language-haskell"}"><!-- HTML_TAG_START -->${`<code class="language-haskell"><span class="token hvariable">typedValidator</span> <span class="token operator">::</span> <span class="token constant">Scripts<span class="token punctuation">.</span>TypedValidator</span> <span class="token constant">Typed</span>
<span class="token hvariable">typedValidator</span> <span class="token operator">=</span> <span class="token hvariable">Scripts<span class="token punctuation">.</span>mkTypedValidator</span> <span class="token operator">@</span><span class="token constant">Typed</span>      
    <span class="token operator">$$</span><span class="token punctuation">(</span><span class="token hvariable">PlutusTx<span class="token punctuation">.</span>compile</span> <span class="token punctuation">[</span><span class="token operator">||</span> <span class="token hvariable">typedRedeemer</span> <span class="token operator">||</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
    <span class="token operator">$$</span><span class="token punctuation">(</span><span class="token hvariable">PlutusTx<span class="token punctuation">.</span>compile</span> <span class="token punctuation">[</span><span class="token operator">||</span> <span class="token hvariable">wrap</span> <span class="token operator">||</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                
  <span class="token keyword">where</span>
    <span class="token hvariable">wrap</span> <span class="token operator">=</span> <span class="token hvariable">Scripts<span class="token punctuation">.</span>wrapValidator</span> <span class="token operator">@</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">@</span><span class="token constant">Integer</span>  </code>`}<!-- HTML_TAG_END --></pre>
<ul><li><strong>Custom</strong> Typed Validator</li></ul>
<pre class="${"language-haskell"}"><!-- HTML_TAG_START -->${`<code class="language-haskell"><span class="token hvariable">typedValidator</span> <span class="token operator">::</span> <span class="token constant">Scripts<span class="token punctuation">.</span>TypedValidator</span> <span class="token constant">Typed</span>
<span class="token hvariable">typedValidator</span> <span class="token operator">=</span> <span class="token hvariable">Scripts<span class="token punctuation">.</span>mkTypedValidator</span> <span class="token operator">@</span><span class="token constant">Typed</span>      <span class="token comment">-- Tell the compiler that you are using Types</span>
    <span class="token operator">$$</span><span class="token punctuation">(</span><span class="token hvariable">PlutusTx<span class="token punctuation">.</span>compile</span> <span class="token punctuation">[</span><span class="token operator">||</span> <span class="token hvariable">typedRedeemer</span> <span class="token operator">||</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
    <span class="token operator">$$</span><span class="token punctuation">(</span><span class="token hvariable">PlutusTx<span class="token punctuation">.</span>compile</span> <span class="token punctuation">[</span><span class="token operator">||</span> <span class="token hvariable">wrap</span> <span class="token operator">||</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token comment">-- Provide the translation into high level typed to low level typed</span>
  <span class="token keyword">where</span>
    <span class="token hvariable">wrap</span> <span class="token operator">=</span> <span class="token hvariable">Scripts<span class="token punctuation">.</span>wrapValidator</span> <span class="token operator">@</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">@</span><span class="token constant">MyWonderfullRedeemer</span> </code>`}<!-- HTML_TAG_END --></pre>
<ul><li>Again, the only change is the substitution of the <code>Integer</code> data type for the <code>MyWonderfullRedeemer</code> data type</li></ul>
<h2 id="${"off-chain-code"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#off-chain-code"}"><span class="${"icon icon-link"}"></span></a>Off-chain code</h2>
<h3 id="${"custom-data-type-endpoints"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#custom-data-type-endpoints"}"><span class="${"icon icon-link"}"></span></a>Custom data type endpoints</h3>
<pre class="${"language-haskell"}"><!-- HTML_TAG_START -->${`<code class="language-haskell"><span class="token keyword">type</span> <span class="token constant">GiftSchema</span> <span class="token operator">=</span>
            <span class="token constant">Endpoint</span> <span class="token string">"give"</span> <span class="token constant">Integer</span>  
        <span class="token operator">./</span> <span class="token constant">Endpoint</span> <span class="token string">"grab"</span> <span class="token constant">Integer</span></code>`}<!-- HTML_TAG_END --></pre>
<ul><li><p>The <code>grab</code> functionâ€™s <code>Integer</code> is taken from the wallet, so thereâ€™s no need to wrap it.</p>
<ul><li>Iâ€™m taking an integer, normally from the playground, in this case itâ€™s an enpoint into the wallet, from the off-chain, no wrapper needed.</li></ul></li>
<li><p>However, it does need to be (ðŸ’‰) injected into the code because it is passed here ðŸ‘‰  <code>Builtins.mkI n</code> in</p></li></ul>
<pre class="${"language-haskell"}"><!-- HTML_TAG_START -->${`<code class="language-haskell"><span class="token hvariable">grab</span> <span class="token operator">::</span> <span class="token hvariable">forall</span> <span class="token hvariable">w</span> <span class="token hvariable">s</span> <span class="token hvariable">e</span><span class="token punctuation">.</span> <span class="token constant">AsContractError</span> <span class="token hvariable">e</span> <span class="token operator">=></span> <span class="token constant">Integer</span> <span class="token operator">-></span> <span class="token constant">Contract</span> <span class="token hvariable">w</span> <span class="token hvariable">s</span> <span class="token hvariable">e</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>                                     
<span class="token hvariable">grab</span> <span class="token hvariable">n</span> <span class="token operator">=</span> <span class="token keyword">do</span>
    <span class="token hvariable">utxos</span> <span class="token operator">&lt;-</span> <span class="token hvariable">utxosAt</span> <span class="token hvariable">scrAddress</span>                                                                      
    <span class="token keyword">let</span> <span class="token hvariable">orefs</span>   <span class="token operator">=</span> <span class="token builtin">fst</span> <span class="token operator">&lt;$></span> <span class="token hvariable">Map<span class="token punctuation">.</span>toList</span> <span class="token hvariable">utxos</span>                                                           
        <span class="token hvariable">lookups</span> <span class="token operator">=</span> <span class="token hvariable">Constraints<span class="token punctuation">.</span>unspentOutputs</span> <span class="token hvariable">utxos</span>      <span class="token operator">&lt;></span>                                           
                  <span class="token hvariable">Constraints<span class="token punctuation">.</span>otherScript</span> <span class="token hvariable">validator</span>                                                  
        <span class="token hvariable">tx</span> <span class="token operator">::</span> <span class="token constant">TxConstraints</span> <span class="token constant">Void</span> <span class="token constant">Void</span>                                                           
        <span class="token hvariable">tx</span>      <span class="token operator">=</span> <span class="token hvariable">mconcat</span> <span class="token punctuation">[</span><span class="token hvariable">mustSpendScriptOutput</span> <span class="token hvariable">oref</span> <span class="token operator">$</span> <span class="token constant">Redeemer</span> <span class="token operator">$</span> <span class="token hvariable">Builtins<span class="token punctuation">.</span>mkI</span> <span class="token hvariable">n</span> <span class="token operator">|</span> <span class="token hvariable">oref</span> <span class="token operator">&lt;-</span> <span class="token hvariable">orefs</span><span class="token punctuation">]</span>  
                                                                                                     
    <span class="token hvariable">ledgerTx</span> <span class="token operator">&lt;-</span> <span class="token hvariable">submitTxConstraintsWith</span> <span class="token operator">@</span><span class="token constant">Void</span> <span class="token hvariable">lookups</span> <span class="token hvariable">tx</span>                                             
    <span class="token hvariable">void</span> <span class="token operator">$</span> <span class="token hvariable">awaitTxConfirmed</span> <span class="token operator">$</span> <span class="token hvariable">getCardanoTxId</span> <span class="token hvariable">ledgerTx</span>                                                
    <span class="token hvariable">logInfo</span> <span class="token operator">@</span><span class="token constant">String</span> <span class="token operator">$</span> <span class="token string">"collected gifts"</span> </code>`}<!-- HTML_TAG_END --></pre>
<ul><li>it needs an <strong>auxiliary function</strong> <code>PlutusTx.toBuiltinData</code> in</li></ul>
<pre class="${"language-haskell"}"><!-- HTML_TAG_START -->${`<code class="language-haskell"><span class="token hvariable">grab</span> <span class="token operator">::</span> <span class="token hvariable">forall</span> <span class="token hvariable">w</span> <span class="token hvariable">s</span> <span class="token hvariable">e</span><span class="token punctuation">.</span> <span class="token constant">AsContractError</span> <span class="token hvariable">e</span> <span class="token operator">=></span> <span class="token constant">Integer</span> <span class="token operator">-></span> <span class="token constant">Contract</span> <span class="token hvariable">w</span> <span class="token hvariable">s</span> <span class="token hvariable">e</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>                                     
<span class="token hvariable">grab</span> <span class="token hvariable">n</span> <span class="token operator">=</span> <span class="token keyword">do</span>
    <span class="token hvariable">utxos</span> <span class="token operator">&lt;-</span> <span class="token hvariable">utxosAt</span> <span class="token hvariable">scrAddress</span>                                                                      
    <span class="token keyword">let</span> <span class="token hvariable">orefs</span>   <span class="token operator">=</span> <span class="token builtin">fst</span> <span class="token operator">&lt;$></span> <span class="token hvariable">Map<span class="token punctuation">.</span>toList</span> <span class="token hvariable">utxos</span>                                                           
        <span class="token hvariable">lookups</span> <span class="token operator">=</span> <span class="token hvariable">Constraints<span class="token punctuation">.</span>unspentOutputs</span> <span class="token hvariable">utxos</span>      <span class="token operator">&lt;></span>                                           
                  <span class="token hvariable">Constraints<span class="token punctuation">.</span>otherScript</span> <span class="token hvariable">validator</span>                                                  
        <span class="token hvariable">tx</span> <span class="token operator">::</span> <span class="token constant">TxConstraints</span> <span class="token constant">Void</span> <span class="token constant">Void</span>                                                            
        <span class="token hvariable">tx</span>      <span class="token operator">=</span> <span class="token hvariable">mconcat</span> <span class="token punctuation">[</span><span class="token hvariable">mustSpendScriptOutput</span> <span class="token hvariable">oref</span> <span class="token operator">$</span> <span class="token constant">Redeemer</span> <span class="token operator">$</span> <span class="token hvariable">PlutusTx<span class="token punctuation">.</span>toBuiltinData</span> <span class="token punctuation">(</span><span class="token constant">MWR</span> <span class="token hvariable">n</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token hvariable">oref</span> <span class="token operator">&lt;-</span> <span class="token hvariable">orefs</span><span class="token punctuation">]</span>  
                                                                                                     
    <span class="token hvariable">ledgerTx</span> <span class="token operator">&lt;-</span> <span class="token hvariable">submitTxConstraintsWith</span> <span class="token operator">@</span><span class="token constant">Void</span> <span class="token hvariable">lookups</span> <span class="token hvariable">tx</span>                                             
    <span class="token hvariable">void</span> <span class="token operator">$</span> <span class="token hvariable">awaitTxConfirmed</span> <span class="token operator">$</span> <span class="token hvariable">getCardanoTxId</span> <span class="token hvariable">ledgerTx</span>                                                
    <span class="token hvariable">logInfo</span> <span class="token operator">@</span><span class="token constant">String</span> <span class="token operator">$</span> <span class="token string">"collected gifts"</span>  </code>`}<!-- HTML_TAG_END --></pre>
<h4 id="${"recap"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#recap"}"><span class="${"icon icon-link"}"></span></a>Recap</h4>
<ol><li>Normal Haskell custom data type definition -&gt; <code>newtype MyWonderfullRedeemer = MWR Integer</code></li>
<li>Itâ€™s injected with <code>PlutusTx.unstableMakeIsData</code> (important part <code>MakeIsData</code>) which is just <code>Data</code> in PlutusTx</li>
<li>The auxiliary function <code>PlutusTx.toBuiltinData</code> (<code>toBuiltinData</code>) which means that we are bringing the</li></ol>`;
});
export {
  _0015 as default,
  metadata
};
